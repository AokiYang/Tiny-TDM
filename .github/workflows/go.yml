name: CI  
  
on:  
  push:  
    branches: [ "main" ]  
  pull_request:  
    branches: [ "main" ]  
  
jobs:  
  build-macos-arm64:  
    runs-on: ubuntu-latest  
    env:  
      GO111MODULE: on  
      CGO_ENABLED: 1  
  
    steps:  
    - name: Checkout code  
      uses: actions/checkout@v3  
  
    - name: Set up Go  
      uses: actions/setup-go@v3  
      with:  
        go-version: '^1.19' # 或者你需要的任何版本  
  
    - name: Install Wails  
      run: |  
        curl -sfL https://install.goreleaser.com/github.com/wailsapp/wails/cmd/wails/latest/linux-amd64/wails.tar.gz | tar xz -C /tmp/  
        sudo mv /tmp/wails /usr/local/bin  
  
    - name: Set up QEMU for cross-compilation  
      uses: docker://multiarch/qemu-user-static --platform=linux/amd64  
      with:  
        args: --reset -p yes  
  
    - name: Install qemu binfmt and qemu-user-static  
      run: |  
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes  
        docker run --rm --privileged -t multiarch/qemu-user-static --cap-add=all -- sysctl -w kernel.unprivileged_userns_clone=1  
  
    - name: Install cross-compilation tools  
      run: |  
        sudo dpkg --add-architecture arm64  
        sudo apt-get update  
        sudo apt-get install -y qemu binfmt-support qemu-user-static gcc-aarch64-linux-gnu g++-aarch64-linux-gnu  
  
    - name: Set up Go environment for cross-compilation  
      run: |  
        GOOS=darwin  
        GOARCH=arm64  
        CGO_ENABLED=1  
        CC=aarch64-linux-gnu-gcc  
        CXX=aarch64-linux-gnu-g++  
  
    - name: Build the Wails application  
      run: |  
        wails build -p macos -a arm64  
  
    - name: Upload artifact  
      uses: actions/upload-artifact@v3  
      with:  
        name: macos-arm64-app  
        path: ./output/YourAppName  # 替换为你的输出目录和应用程序名称  
  
# 注意：  
# 1. 交叉编译 macOS ARM64 应用程序可能需要一些特定的依赖和配置，这取决于你的项目。  
# 2. 上面的步骤中，我们使用了 QEMU 来模拟 ARM64 环境，但这通常用于 Linux 到 Linux 的交叉编译。  
#    对于 macOS，你可能需要使用其他方法，如使用 macOS 的 CI/CD 机器或 Docker 容器。  
# 3. 由于 GitHub Actions 的托管运行器不支持直接运行 macOS ARM64，你可能需要考虑使用自托管的运行器。  
# 4. Wails 的构建过程可能需要其他依赖项，这取决于你的项目。  
# 5. 请确保你的 `wails.json` 配置文件中的设置是正确的，特别是与 macOS 相关的设置。  
  
# 由于直接在 GitHub Actions 的托管 Ubuntu 运行器上交叉编译 macOS ARM64 应用程序可能比较复杂，  
# 你可能需要考虑使用 macOS 的虚拟机、Docker 容器或自托管的 CI/CD 机器来完成这个任务。
